#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from calculadora import Calculadora
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void ping()'
  print '  double suma(double num1, double num2)'
  print '  double sub(double num1, double num2)'
  print '  double mult(double num1, double num2)'
  print '  double div(double num1, double num2)'
  print '   sumVec( vec1,  vec2)'
  print '   subVec( vec1,  vec2)'
  print '  double escVec( vec1,  vec2)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'suma':
  if len(args) != 2:
    print 'suma requires 2 args'
    sys.exit(1)
  pp.pprint(client.suma(eval(args[0]),eval(args[1]),))

elif cmd == 'sub':
  if len(args) != 2:
    print 'sub requires 2 args'
    sys.exit(1)
  pp.pprint(client.sub(eval(args[0]),eval(args[1]),))

elif cmd == 'mult':
  if len(args) != 2:
    print 'mult requires 2 args'
    sys.exit(1)
  pp.pprint(client.mult(eval(args[0]),eval(args[1]),))

elif cmd == 'div':
  if len(args) != 2:
    print 'div requires 2 args'
    sys.exit(1)
  pp.pprint(client.div(eval(args[0]),eval(args[1]),))

elif cmd == 'sumVec':
  if len(args) != 2:
    print 'sumVec requires 2 args'
    sys.exit(1)
  pp.pprint(client.sumVec(eval(args[0]),eval(args[1]),))

elif cmd == 'subVec':
  if len(args) != 2:
    print 'subVec requires 2 args'
    sys.exit(1)
  pp.pprint(client.subVec(eval(args[0]),eval(args[1]),))

elif cmd == 'escVec':
  if len(args) != 2:
    print 'escVec requires 2 args'
    sys.exit(1)
  pp.pprint(client.escVec(eval(args[0]),eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
